# main source file

.org 0x10000000


and $v0 $v0 $zero
li $i0 interrupt_service_routine
li $t0 0b0101
li $s0 0xF0700000
sw $t0 0($s0)

spin:
    j spin
    nop

interrupt_service_routine:
    lw $t0 4($s0)
    li $t1 5
    beq $t0 $t1 main
    nop

main:
    jal set_ready_bit
    and $s1 $s1 $zero # Interim value
    consume_uart:
        and $v1 $v1 $zero
        jal get_uart
        nop
        move $a0 $v1
        jal check_for_terminator
        nop
        jal check_for_non_numerical
        nop
        jal append_value
        nop
        jal set_ready_bit
        nop
        j consume_uart
        nop

get_uart:
    li $t0 0xF0000000
    lw $v1 8($t0)
    jr $ra
    nop

check_for_terminator:
    li $t0 61
    beq $t0 $a0 success
    nop
    jr $ra

check_for_non_numerical:
    slti $t0 $a0 48  # t0 = (val < 48) ? 1 : 0
    ori $t2 $zero 57
    slt $t1 $t2 $a0  # t1 = (57 < val) ? 1 : 0
    or $v1 $t0 $t1   # v1 = t0 | t1
    bne $v1 $zero raise_invalid
    nop
    jr $ra
    nop

raise_invalid:
    li $a0 0b1
    j end
    nop

append_value:
    andi $t0 $a0 0b1111
    ori $t1 $zero 10
    mullo $t2 $s0 $t1
    mulhi $t3 $s0 $t1
    addu $s1 $t2 $t3
    addu $s1 $s1 $t0
    jr $ra
    nop

set_ready_bit:
    li $t0 0xF0000000
    lw $t1 0($t0)
    li $t1 0b10
    sw $t1 0($t0)
    jr $ra
    nop

success:
    move $v0 $s1
    li $a0 0
    j end
    nop

end:
    li $t0 0xF0000000
    li $t1 0b1
    sw $t1 0($t0)
    ori $t2 $a0 0b110000 # Conver argument to ASCII
    sw $t2 12($t0)
    jal set_ready_bit
    nop
    j reset_interrupt
    nop

reset_interrupt:
    li $t0 5
    sw $t0 0($s0)
    li $t1 1
    sw $t0 4($s0)
    j main
    nop
